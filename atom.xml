<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://inthowe.github.io</id>
    <title>你看见我小熊么</title>
    <updated>2021-03-10T05:41:16.026Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://inthowe.github.io"/>
    <link rel="self" href="https://inthowe.github.io/atom.xml"/>
    <subtitle>别打了！别打了！在学了！</subtitle>
    <logo>https://inthowe.github.io/images/avatar.png</logo>
    <icon>https://inthowe.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 你看见我小熊么</rights>
    <entry>
        <title type="html"><![CDATA[初识动态规划]]></title>
        <id>https://inthowe.github.io/post/DP1/</id>
        <link href="https://inthowe.github.io/post/DP1/">
        </link>
        <updated>2021-03-09T06:12:07.000Z</updated>
        <summary type="html"><![CDATA[<p>动态规划是一种特殊的分治思想，用一种可变的表格（多为一维数组或二维数组）来存储子问题的计算结果，避免后续重复计算已经计算过的子问题，进而实现时间复杂度的优化。</p>
]]></summary>
        <content type="html"><![CDATA[<p>动态规划是一种特殊的分治思想，用一种可变的表格（多为一维数组或二维数组）来存储子问题的计算结果，避免后续重复计算已经计算过的子问题，进而实现时间复杂度的优化。</p>
<!-- more -->
<h1 id="动态规划步骤">动态规划步骤</h1>
<ol>
<li>动态规划类似于数学归纳法，为了解决一个问题，把它分解成若干个与此问题相似的子问题，当我们要计算dp[n]，可以通过dp[n - 1]，dp[n - 2]......dp[1]推出dp[n]，我们必须要找到子问题之间的关系，如dp[n] = dp[n - 1] + dp[n - 2]。</li>
<li>通过表格储存各个子问题的计算结果。</li>
<li>找出初始值，如dp[n] = dp[n - 1] + dp[n - 2]，dp[1]和dp[2]我们无法通过前面的关系式进行分解，所以我们需要找出dp[1]和dp[2]的初始值，这样就可以计算出dp[3]，dp[4]...dp[n]的值。</li>
</ol>
<h1 id="举个例子">举个例子</h1>
<h2 id="leetcode70-爬楼梯"><a href="https://leetcode-cn.com/problems/climbing-stairs/">leetcode#70. 爬楼梯</a></h2>
<blockquote>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>
注意：给定 n 是一个正整数。<br>
示例：<br>
输入： 3<br>
输出： 3<br>
解释： 有三种方法可以爬到楼顶。<br>
1 阶 + 2 阶<br>
1 阶 + 1 阶 + 1 阶<br>
2 阶 + 1 阶</p>
</blockquote>
<ol>
<li>首先将问题分解成多个子问题，最终的结果是我们需要跳上第n阶楼梯，那么我们一共哪几种方法跳上第n阶楼梯呢？我们每次只能爬1个或2个台阶，也就是说我们只能从第n - 1阶楼梯爬1个台阶或从第n - 2阶楼梯爬2个台阶爬上第n阶楼梯。</li>
</ol>
<blockquote>
<p>假设是3阶楼梯，那我们就只能从第2阶楼梯爬1个台阶或第1阶梯爬2个台阶爬上第3阶楼梯，不存在其它的情况。<br>
易得，爬1阶楼梯只有1种方法（爬1个台阶），爬2阶楼梯只有2种方法（1 阶 + 1 阶或者2 阶）<br>
那爬3阶楼梯的方法数应当等于爬1阶楼梯和爬2阶楼梯的方法数总和，我们从示例中可以简单看出。</p>
<blockquote>
<p>（注：从1阶爬上3阶只能爬2个台阶，如果从1阶楼梯爬1阶后再爬1阶到3阶楼梯的话，这一方法会与从第2阶爬1个台阶上3阶中的1 阶 + 1 阶 + 1 阶重复，即从1阶楼梯爬1阶 + 1阶到3阶楼梯的时候会到达2阶楼梯，再爬1阶就已经属于2阶爬1阶到3阶楼梯中的方法了）</p>
</blockquote>
</blockquote>
<blockquote>
<p>所以我们可以将规模为n的问题分解为n - 1和n - 2的问题，即dp[n] = dp[n - 1] + dp[n -2]</p>
<blockquote>
<p>（注：从n - 1阶楼多爬1个阶台阶上n阶相当于在爬上n - 1阶楼各个方法的后面+1阶上n阶，没有增加方法数，从n - 2阶楼多爬2个阶台阶上n阶相当于在爬上n - 2阶楼各个方法的后面+2阶上n阶，也没有增加方法数，如示例一般，所以关系式是dp[n] = dp[n - 1] + dp[n -2]，方法数相加）<br>
那么我们就可以把规模为n的问题分解为规模为n - 1和n - 2的子问题</p>
</blockquote>
</blockquote>
<ol start="2">
<li>我们可以通过一维数组dp记录爬上各阶楼梯的方法数（子问题的计算结果），这样可以避免子问题的方法数重复计算。</li>
</ol>
<blockquote>
<p>(注：比如dp[1] = 1(爬1阶楼梯有1种方法),dp[2] = 2(爬2阶楼梯有2种方法)，dp[3] = dp[1] + dp[2]，计算爬3阶楼梯的时候我们就不用再去计算爬1和2阶楼梯有多少种方法，dp[4] = dp[2] + dp[3],计算爬4阶楼梯的时候我们就不用再次去计算爬2和3阶楼梯有多少种方法，避免重复计算）</p>
</blockquote>
<ol start="3">
<li>规模为n的问题最终为分解为dp[1]和dp[2]，无法在分解下去，前面我们就已经找到初始值了（dp[1] = 1，dp[2] = 2）<br>
最终算法如下</li>
</ol>
<blockquote>
<pre><code>public int climbStairs(int n) {
    if(n &lt; 2){ //当楼梯只有1阶的时候（leetcode的题目第一步一般是处理特殊值）
        return 1;
    }
    int[] ans = new int[n + 1];
    ans[0] = 0;
    ans[1] = 1; //爬1阶楼梯有1种方法
    ans[2] = 2; //爬2阶楼梯有2种方法
    for(int i = 3;i &lt; n + 1;i++){
        ans[i] = ans[i - 1] + ans[i - 2]; //dp[n] = dp[n - 1] + dp[n -2]
    }
    return ans[n]; //爬n楼梯的方法数
}
</code></pre>
</blockquote>
<h2 id="练习">练习：</h2>
<p><a href="https://leetcode-cn.com/problems/three-steps-problem-lcci/">leetcode#面试题 08.01. 三步问题</a><br>
<a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/">leetcode#746. 使用最小花费爬楼梯</a></p>
<h1 id="leetcode53-最大子序和"><a href="https://leetcode-cn.com/problems/maximum-subarray/">leetcode#53. 最大子序和</a></h1>
<blockquote>
<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>
示例 1：<br>
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>
输出：6<br>
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p>
</blockquote>
<ol>
<li>将规模为n的数组尝试分解为多个子问题进行解决，我们先从小规模寻找规律<br>
1.当数组规模为1的时候，很明显连续子数组最大和为nums[0]。<br>
2.但数组规模为2的时候，连续子数组只有三种情况:（1）nums[0]（2）nums[1]（3）nums[0] + nums[1]，那么连续子数组最大和只可能是这三种情况中的最大值。</li>
<li>那我们可以从数组最后一个元素下手，我们把数组分为两部分[【-2,1,-3,4,-1,2,1,-5】,4],那么连续子数组的最大和只有三种情况（1）连续子数组是【-2,1,-3,4,-1,2,1,-5】的一部分或全部，即子集（2）连续子数组是【-2,1,-3,4,-1,2,1,-5】的子集并上<code>4</code>(该子集必定包含【-2,1,-3,4,-1,2,1,-5】数组的最后一个元素<code>-5</code>，不然并上<code>4</code>就不连续了)（3）连续子数组只有<code>4</code>。对这三种情况进行比较即可求出连续最大和子集。</li>
</ol>
<blockquote>
<p>拿数组规模为3（即[-2,1,-3]）来简单说明：我们从数组最后一个元素下手，把数组分为两部分[【-2,1】,-3],那么连续子数组的最大和只有三种情况（1）连续子数组是【-2,1】的子集，即[-2],[1],[-2,1]，（2）连续子数组是【-2,1】的子集并上<code>-3</code>，即[1,-3],[-2,1,-3]（3）连续子数组为[-3]。连续和最大子数组只有可能存在于这三种情况中。<br>
第二种和第三种情况进行比较，其实是求问题规模为n，将包含末尾元素<code>4</code>的子集进行比较，要么是第二种情况（【-2,1,-3,4,-1,2,1,-5】的子集并上<code>4</code>）大，要么是第三种情况（<code>只有4</code>）大，然后再和第一种相比较。</p>
</blockquote>
<ol start="3">
<li>对应上述的三种情况，我们只需比较【-2,1,-3,4,-1,2,1,-5】连续和最大的子集、包含<code>-5</code>元素连续和最大的子集再简单加上<code>4</code>、<code>4</code>这三者就能求出连续和最大的子集。<br>
1.【-2,1,-3,4,-1,2,1,-5】连续和最大的子集不就相当于规模为n - 1的问题了么，仅仅只是去掉了<code>4</code>这一个元素。<br>
2.包含<code>-5</code>元素连续和最大的子集再加上<code>4</code>相当于[【-2,1,-3,4,-1,2,1】,-5]连续和最大的子集并上<code>-5</code>（同样的，【-2,1,-3,4,-1,2,1】的连续和最大子集必定包含1，不然并上<code>-5</code>就不连续了。）或者只有<code>-5</code>。<br>
3.这样我们就转而求【-2,1,-3,4,-1,2,1】，问题规模降为n - 2，这样套娃下去，直至问题规模为1，无法分解为止。</li>
</ol>
<p>综上所述，我们只须比较三个值，连续最大和子集max，包含末尾元素的连续最大和子集pre，末尾元素i，取其最大即可。<br>
最终代码如下：</p>
<blockquote>
<pre><code>public int maxSubArray(int[] nums) {
    int max = nums[0],pre = 0; //规模为1时，连续最大和子集max只能是nums[0]
    for(int i : nums){ //这里从规模为1开始
        pre = Math.max(pre + i,i); //包含末尾元素的连续最大和子集只有两种可能，要么第二种情况（前面子序列加上末尾元素），要么第三种情况（只有末尾元素）
        max = Math.max(max,pre); //再与第一种情况相比较，求出nums[j]的连续最大和子集，进而求规模为j+1的问题
    }
    return max;
}
</code></pre>
</blockquote>
<h2 id="练习-2">练习：</h2>
<p><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">leetcode#剑指 Offer 42. 连续子数组的最大和（题目相同）</a><br>
<a href="https://leetcode-cn.com/problems/contiguous-sequence-lcci/">leetcode#面试题 16.17. 连续数列（题目相同）</a><br>
<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">leetcode#121. 买卖股票的最佳时机</a></p>
<blockquote>
<p>（先做题再看提示）同样的我们只要把最后一天和前面几天区分开，要么是最后一天卖股票，要么是在前面几天卖股票，要么就是0（一直亏损），如果是最后一天卖，只要找出前几天的最小值，最后一天减最小值，就是最后一天卖的最大收益，要么是前几天卖，那就将规模缩小为（n - 1），套娃到最后，就剩第一天了，最小值min就只能为第一天，到第二天最大化收益max只能是第一天减第一天，最小值只能是第一天或者第二天，到第三天，就是第三天减最小值的收益和第二天最大化收益max进行比较，求出最大值，就是到第三天的最大化收益max（避免重复计算最大收益），第三天股票价格和min（前两天的最小值）相比较（避免重复计算最小值），就可以求出到第三天股票的最低价格......套娃到第n天即可。</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">leetcode#303. 区域和检索 - 数组不可变</a><br>
<a href="https://leetcode-cn.com/problems/divisor-game/">leetcode#1025. 除数博弈</a><br>
<a href="https://leetcode-cn.com/problems/the-masseuse-lcci/">leetcode#面试题 17.16. 按摩师</a></p>
<blockquote>
<p>（先做题再看提示）同样的我们只要把最后一个预约和前面几个预约区（归为子序列）分开（因为这样才能一阶一阶地降低问题规模），要注意的是按摩师不能连续工作，举个例子，只有一个工作预约的时候工作时长最长max只能等于nums[0]。两个工作预约时，max取其第一个预约和第二个预约的最大值。三个预约时，如果上一个预约（即第二个预约）工作了，那么第三个预约就不能工作了，所以只能是“不包含上一个预约的工作时间长（这里只剩第一个预约）加上第三个预约时长”与“包含上一个预约（这里只有第二个预约）的工作时长”进行,max取其最大值。四个预约时，同理，第三个预约不工作第四个预约工作或者第三个预约工作第四个预约不工作，但是这里要注意一点，在前面“不包含上一个预约的工作时间长（这里只剩第一个预约）加上第三个预约时长”中，如果我们单独去掉第三个预约（这里就只剩第一个预约），那么第四个预约也是可以工作的，即包含第四个预约有两种情况（1 + 4或者2 + 4）求其最大值,赋给n，不包含第四个预约就只有一种情况(1 + 3即仍为上面所说的“不包含上一个预约的工作时间长（这里只剩第一个预约）加上第三个预约时长”)，时长为f。第五个预约，不包含第四个预约，那就是f + nums[5]，包含第四个预约，只要去掉第四个预约即n - nums[4] + nums[5]。到5个预约为止，工作时长最大值max为&quot;f + nums[5]（即1 + 3 + 5）&quot;，&quot;n - nums[4] + nums[5]（即1 + 5或2 + 5）&quot;，或者&quot;n（第五个预约也是可以不工作的，即1 + 4或者2 + 4）&quot;，f = 最后一个预约不工作的最长时长，n = 最后一个预约工作的最长时长，开始套娃。</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/is-subsequence/">leetcode#392. 判断子序列</a></p>
<blockquote>
<p>这样用到二维数组来记录，不好说明，见leetcode视频</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[入门依赖注入]]></title>
        <id>https://inthowe.github.io/post/springDI2/</id>
        <link href="https://inthowe.github.io/post/springDI2/">
        </link>
        <updated>2021-03-04T06:34:00.000Z</updated>
        <summary type="html"><![CDATA[<p>在 Spring 中，对象无需自己查找或创建与其所关联的其他对象，容器会负责把需要相互协作的对象引用赋予各个对象。创建应用对象之间协作关系的行为称为装配wiring，这也是依赖注入DI的本质。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在 Spring 中，对象无需自己查找或创建与其所关联的其他对象，容器会负责把需要相互协作的对象引用赋予各个对象。创建应用对象之间协作关系的行为称为装配wiring，这也是依赖注入DI的本质。</p>
<!-- more -->
<p>Spring 容器负责创建应用程序中的 bean（简单看为一个具体对象） 并通过 DI 来协调这些对象之间的关系。我们只需告诉 Spring 要创建哪些 bean 并且如何将其装配在一起，有如下三种方式：</p>
<ul>
<li><a href="#%E9%9A%90%E5%BC%8F%E7%9A%84bean%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D">隐式的bean发现机制和自动装配</a></li>
<li><a href="#%E5%9C%A8java%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%98%BE%E5%BC%8F%E9%85%8D%E7%BD%AE">在Java中进行显式配置</a></li>
<li><a href="#%E5%9C%A8xml%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%98%BE%E5%BC%8F%E9%85%8D%E7%BD%AE">在XML中进行显式配置</a></li>
</ul>
<h1 id="隐式的bean发现机制和自动装配">隐式的bean发现机制和自动装配</h1>
<p>隐式的bean发现机制通过组件扫描（component scanning）实现，Spring 会自动发现应用上下文中所创建的 bean。自动装配（autowiring）则是Spring 自动满足 bean 之间的依赖。</p>
<p>沿用&quot;初识依赖注入&quot;中的例子,我们将拯救公主任务类修改如下</p>
<blockquote>
<pre><code>@Component
public class RescueDamselQuest implements quest{
    public void embark() {
        System.out.println(&quot;拯救公主小分队&quot;);
    }
}
</code></pre>
<p>通过添加一个<code>@Component</code>注解将RescueDamselQuest类声明为组件类，Spring会通过组件扫描将其发现并为之创建Bean。</p>
</blockquote>
<p>将骑士类修改如下</p>
<blockquote>
<pre><code>public class BraveKnight implements knight{
    @Autowired
    private quest quest;
    public void embarkOnQuest() {
        quest.embark();
    }
}
</code></pre>
<p>通过<code>@Autowired</code>注解实现自动装配，Spring会将匹配依赖需求的bean装配进来，即将RescueDamselQuest类装配到quest中，从而无需通过构造器注入。</p>
</blockquote>
<p>如果我们现在需要骑士去执行其它任务，如打败恶龙的任务，则只须将RescueDamselQuest类上的<code>@Component</code>注解去除，在SlayDragonQuest类上加上<code>@Component</code>注解即可，而不需要改动BraveKnight的代码，这样我们无须通过硬编码的方式，而是通过配置的方式给骑士指派具体的任务。或者在所有的任务类上都加上<code>@Component</code>注解，进而Spring在给BraveKnight类自动注入quest时将会产生歧义，因为有三个bean符合要求。我们可以通过限定符<code>@Qualifier</code>来具体指定注入哪个bean，指派具体的任务，假设我们要注入屠龙任务，则</p>
<blockquote>
<pre><code>public class BraveKnight implements knight{
    @Autowired
    @Qualifier(&quot;SlayDragonQuest&quot;)
    private quest quest;
    public void embarkOnQuest() {
        quest.embark();
    }
}
</code></pre>
</blockquote>
<h1 id="在java中进行显式配置">在Java中进行显式配置</h1>
<p>除了通过注解<code>@Component</code>隐式发现bean和<code>@Autowired</code>自动装配机制，我们还可以通过显式的Java配置给我们的骑士指派特定的任务。回到&quot;初始依赖注入&quot;中的骑士和任务的代码（即去除所有<code>@Component</code>和<code>@Autowired</code>注解），我们只需要添加一个&quot;KnightConfig&quot;配置来给我们的骑士指派具体的任务，如下</p>
<blockquote>
<pre><code>@Configuration
public class KnightConfig {
    @Bean
    public Quest quest() {
        return new SlayDragonQuest();
    }
    @Bean
    public Knight knight(Quest quest) {
        return new BraveKnight(quest);
    }
}
</code></pre>
</blockquote>
<p>这样我们通过自动注入的方式就可以给我们的骑士指派打败恶龙的任务，指派其它任务则只须需改配置，将<code>return new SlayDragonQuest();</code>修改为<code>return new RescueDamselQuest();</code>,这样就改为给骑士指派拯救公主的任务。</p>
<h1 id="在xml中进行显式配置">在XML中进行显式配置</h1>
<p>我不喜欢XML，略。基本采用第一种方式，代码相对较简约，其次bean的配置在实际应用过程中其实很少会发生变动，也很少出现注入的bean会发生冲突。</p>
<p>通过两种上面两种方式配置完骑士类，就可以通过自动装配创建骑士类对象</p>
<blockquote>
<pre><code>public class test {
    @Autowired
    private static BraveKnight braveKnight；
    public static void main(String[] args) {
        braveKnight.embarkOnQuest();
    }
}
</code></pre>
</blockquote>
<h1 id="依赖注入实现控制反转">依赖注入实现控制反转</h1>
<p>将类与类之间的依赖和控制剥离出来，交给第三方Spring去做，将控制权反转给Spring。由Spring来控制依赖，通过构造函数或属性等注入进去（将任务类注入骑士类）。如果没有将控制反转给Spring，假设我们要创建一个拯救公主的骑士，那么我们得创建拯救公主的任务类（new RescueDamselQuest()），然后创建骑士类（new BraveKnight()）,把我们的拯救公主任务注入我们的骑士类中去，对于这样相对简单的依赖，似乎这样做也没有什么问题，但如果依赖关系变得复杂，A依赖B，B依赖C，C依赖D，D依赖E，那我们就得先创建E，在创建D，把E注入D，然后创建C，把D注入C中，再创建B，把C注入B中，最后再创建A，把B注入A中，这一个过程中我们为了使用一个A，创建了5个对象，要是多个地方使用到了A，那我们就得创建出5倍的对象出来，同时这些类一旦出现修改，我们就得修改多个地方。而将控制反转给Spring，我们只需要在配置中指明这些类的依赖关系，最后创建A对象时，只需要添加一个自动注入的注解，Spring就会为我们自动装配好。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识依赖注入]]></title>
        <id>https://inthowe.github.io/post/springDI1/</id>
        <link href="https://inthowe.github.io/post/springDI1/">
        </link>
        <updated>2021-03-03T10:40:17.000Z</updated>
        <summary type="html"><![CDATA[<p>通过依赖注入DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系。实现代码解耦及易于理解和测试。</p>
]]></summary>
        <content type="html"><![CDATA[<p>通过依赖注入DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系。实现代码解耦及易于理解和测试。</p>
<!-- more -->
<h2 id="举个列子">举个列子</h2>
<p>骑士执行拯救公主，打败恶龙，圆桌滚动等任务，下面创建对应的类</p>
<ul>
<li>任务接口Quest</li>
</ul>
<blockquote>
<pre><code>public interface Quest { 
    void embark(); 
}
</code></pre>
</blockquote>
<ul>
<li>
<p>Quest接口的三个实现类</p>
<ul>
<li>拯救公主任务</li>
</ul>
<blockquote>
<pre><code>public class RescueDamselQuest implements Quest{
    public void embark() {
        System.out.println(&quot;拯救公主小分队&quot;);
    }
}
</code></pre>
</blockquote>
<ul>
<li>屠龙任务</li>
</ul>
<blockquote>
<pre><code>public class SlayDragonQuest implements Quest{
    public void embark() {
        System.out.println(&quot;屠龙勇士&quot;);
    }
}
</code></pre>
</blockquote>
<ul>
<li>圆桌任务</li>
</ul>
<blockquote>
<pre><code>public class MakeRoundTableRounderQuest implements Quest{
    public void embark() {
        System.out.println(&quot;我干了，你们随意&quot;);
    }
}
</code></pre>
</blockquote>
</li>
<li>
<p>骑士接口</p>
</li>
</ul>
<blockquote>
<pre><code>public interface knight {
    void embarkOnQuest(); //执行任务
}
</code></pre>
</blockquote>
<p>现在骑士需要执行拯救公主的任务，如下实现了一个类</p>
<blockquote>
<pre><code>public class BraveKnight  implements knight{
    private RescueDamselQuest quest;
    public BraveKnight () {
        this.quest = new RescueDamselQuest(); //接受任务
    }
    public void embarkOnQuest() {
        quest.embark(); //执行任务
    }
}
</code></pre>
</blockquote>
<p>BraveKnight在它的构造函数中自行创建了RescueDamselQuest（new RescueDamselQuest()），这使得BraveKnight紧密地和 RescueDamselQuest耦合到了一起，因此如果让骑士执行其他任务如屠龙任务，那么BraveKnight将无法执行。</p>
<blockquote>
<p><strong>耦合是因为BraveKnight这个类去负责管理RescueDamselQuest或SlayDragonQuest等任务类（它所相互协作、依赖的类）的引用（自行创建依赖类）</strong><br>
骑士类仅仅只是需要接受一个任务，但具体是拯救公主任务，打败恶龙，圆桌滚动还是其它实现任务接口的其它类，并不重要。具体的骑士对象接受的是哪个具体任务，应该交由配置来实现，即注入的那个具体任务。</p>
</blockquote>
<h2 id="依赖注入方式之-构造器参数传入">依赖注入方式之--构造器参数传入</h2>
<blockquote>
<pre><code>public class BraveKnight implements knight{
    private Quest quest;
    public BraveKnight(Quest quest) {
        this.quest = quest;
    }
    public void embarkOnQuest() {
        quest.embark();
    }
}
</code></pre>
</blockquote>
<p>如上可以看到，BraveKnight 没有自行创建探险任务（new一个任务对象），没有与任何特定的 Quest 实现发生耦合，实现松耦合，所以BraveKnight 类能够响应 RescueDamselQuest、SlayDragonQuest、MakeRoundTableRounderQuest 等任意的Quest 接口的实现类，从而执行各种任务。</p>
<blockquote>
<pre><code>public class test {
    private static BraveKnight braveKnight = new BraveKnight(new RescueDamselQuest());
    public static void main(String[] args) {
        braveKnight.embarkOnQuest();
    }
}
</code></pre>
</blockquote>
<blockquote>
<p><strong>通过依赖注入DI能够实现解耦，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系。</strong></p>
</blockquote>
]]></content>
    </entry>
</feed>